mongosh
use demo
show dbs
db.dropDatabase()
db.createCollection("employee")
show collections
db.employee.drop()
db.createCollection("student", {capped:true, size:100000, max:10000})
db.student.insert({name:"Abc"})

INSERT DOCUMENTS IN A COLLECTION
 db.student.insertOne(
...   {
...     name: "Sanya",
...     gender: "Female",
...     age: 10,
...     class: 5,
...   }
... )

 db.student.insertMany([
...    {
...     name: "Rajat",
...     gender: "Male",
...     age: 15,
...     class: 10,
...     },
...     {
...     name: "Mohit",
...     gender: "Male",
...     age: 13,
...     class: 8,
...     }
... ])

RETRIEVE DOCUMENTS IN A COLLECTION
db.student.find()

RETRIEVE USING-
LOGICAL OPERATOR
db.student.find( { gender: "Male", class: { $gte: 9 } } )
db.student.find( {
...      $or: [ { class: { $gte: 9 } }, { gender: "Female" } ]
... } )
db.student.find({name: {$not:{$eq: "Rajat"}}})
db.student.find({$nor:[{name: "Rajat"}, {name: "Sanya"}]})

COMPARISON OPERATOR
db.student.find({class: {$eq: 8}})
db.student.find({class: {$ne:8}})
db.student.find({class: {$gt: 8}})
db.student.find({class: {$gte: 8}})
db.student.find({class: {$lt: 8}})
db.student.find({class: {$lte: 8}})
db.student.find({class: {$in:[5, 8]}})
db.student.find({class: {$nin:[5, 8]}})

ELEMENT OPERATOR
db.student.find( { gender: { $exists: true } } )
db.student.find( { "class" : { $type : "double" } } ) -> No output
db.student.find( { "class" : { $type : "int" } } ) -> All values

ARRAY OPERATOR
db.student.find( { gender: { $all: ["Male"]}})
db.student.find({subjects: {$elemMatch: {$in:["Maths", "Science"]}}})
db.student.find({subjects: {$size: 3}})

UPDATE
db.student.updateOne({name: 'Rajat'}, {$set: {class: 9}})
db.student.updateMany({name: 'Rajat'}, {$set: {class: 10, age: 17}})
db.student.replaceOne({name: 'Sanya'}, {name:'Sarthak', gender: 'Male', class: 9, age: 16})

DELETE
db.student.deleteOne({age: 10})
db.student.deleteMany({age: 10})
db.student.remove({age: 10}) // Deprecated

NESTED QUERIES
db.student.insertMany( [ 
   { name: "Rohit", marks: [ { subject: "English", qty: 95 }, { subject: "Maths", qty: 89 } ] },
   { name: "Renu", marks: [ { subject: "English", qty: 77 } ] }
]);

db.student.find({marks: {subject: 'English', qty: 95}})
db.student.find({"marks.qty": {$lte:90}})
db.student.find({"marks.0.qty": {$lte:80}})

db.student.insertMany( [ 
   { name: "Priya", marks: [ { subject: "English", qty: 55 }, { subject: "Maths", qty: 71 }, { subject: "Science", qty: 95 }, { subject: "Sst", qty: 65 } ] },
   { name: "Tanu", marks: [ { subject: "English", qty: 63 }, { subject: "Maths", qty: 88 }, { subject: "Science", qty: 86 }, { subject: "Sst", qty: 59 } ] }
])
 
db.student.find({"marks": {$elemMatch: {qty:95, subject: "Science"}}})
db.student.find({"marks": {$elemMatch: {qty: { $gt: 60, $lt: 80}}}})
db.student.find({"marks.qty": {$gt: 60, $lt: 80}})
db.student.find({"marks.qty": 88, "marks.subject": "Sst"})

UPDATE OPERATORS
db.student.updateOne({name: "Sanya"},{$inc: {age: 2, class:2}})
db.student.updateOne({ name: 'Tanu', "marks.subject": 'Maths' }, { $mul: { "marks.$.qty": 0.5 }})
db.student.updateMany({ gender: { $ne: null } },{ $rename: { gender: "Gender" }})
db.student.updateOne( { "First-Name": 'Priya', "marks.subject": 'English' }, { $set: { "marks.$.qty": 80 } } )
db.student.updateOne( { "First-Name": 'Priya', "marks.subject": 'English' }, { $unset: { "marks.$.qty": "" } } )

ARRAY UPDATE OPERATORS
db.student.updateOne({Gender: 'Male'}, {$push: {subjects: 'French'}})
db.student.updateOne({Gender: 'Male'}, {$pop: {subjects: -1}})
db.student.updateOne({Gender: 'Male'} , {$pull: {subjects: {$in: ["English", "Maths"]}}})
db.student.updateOne({Gender: 'Male'} , {$pullAll: {subjects: ["French", "Maths"]}})
db.student.updateOne({Gender: 'Male'} , {$addToSet: {subjects: "French"}})

INDEXING
db.student.getIndexes()
db.student.createIndex({class: -1}) //Descending // Single
db.student.createIndex({"marks.qty": -1}) // Embedded Field
db.student.createIndex({"subjects":1}) // Embedded Doc
db.student.createIndex({class: -1, age: 1}) // Compound Index

db.student.dropIndex("marks.qty_-1") // Drop Index
db.student.dropIndexes() // Drop all indexes except Id
db.collection.dropIndexes( { a: 1, b: 1 } )
db.collection.dropIndexes( "a_1_b_1" )
